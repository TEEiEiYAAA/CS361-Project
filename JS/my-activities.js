// Configuration
const CONFIG = {
  API_BASE_URL: 'https://mb252cstbb.execute-api.us-east-1.amazonaws.com/prod',
  ENDPOINTS: {
    STUDENT_ACTIVITIES: '/students/{studentId}/activities',
    VERIFY_QR: '/activities/verify-qr',
    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏¥‡∏Å‡∏±‡∏î
    CONFIRM_ATTENDANCE: '/activities/confirm'
  }
};

// Global variables
let currentUser = null;

let allActivities = [];         // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏ß‡πâ
let currentFilter = 'upcoming'; // ‚úÖ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ó‡πá‡∏ö

// ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡∏á‡∏à‡∏£‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏£‡∏¥‡∏á + ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
function getLifecycleState(a) {
  const now = new Date();
  const start = a.startDateTime ? new Date(a.startDateTime) : null;
  const end   = a.endDateTime ? new Date(a.endDateTime)   : null;

  // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°
  if (start && now < start) return 'UPCOMING';

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î)
  if (start && now >= start && (!end || now <= end)) {
    return 'IN_PROGRESS';
  }

  // ‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß
  return 'ENDED';
}

// Initialize application
document.addEventListener('DOMContentLoaded', function() {
  initializeApp();
});

// Initialize the application
function initializeApp() {
  currentUser = JSON.parse(localStorage.getItem('userData') || '{}');
  if (!currentUser.studentId && !currentUser.userId) {
    redirectToLogin();
    return;
  }
  setupTabButtons(); // ‚úÖ new
  const studentId = currentUser.studentId || currentUser.userId;
  loadUserActivities(studentId);

  // ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö popup ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ element ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
  setupGeoPopupHandlers();
}

function setupTabButtons() {
  const tabButtons = document.querySelectorAll('.tab-btn');
  tabButtons.forEach(btn => {
    btn.addEventListener('click', () => {
      tabButtons.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      currentFilter = btn.dataset.filter; // 'upcoming' | 'inprogress' | 'done'
      filterAndRender(); // ‚úÖ render ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡πÅ‡∏ó‡πá‡∏ö
    });
  });
}

// Redirect to login page
function redirectToLogin() {
  window.location.href = "login.html";
}

// Load user activities from API
async function loadUserActivities(studentId) {
  const list = document.getElementById('activities-list');
  try {
    list.innerHTML = '<div class="loading">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>';
    const apiUrl = CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.STUDENT_ACTIVITIES.replace('{studentId}', studentId);
    const resp = await fetch(apiUrl, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      }
    });
    if (!resp.ok) throw new Error(`HTTP ${resp.status}: ${resp.statusText}`);
    const activities = await resp.json();

    allActivities = activities || [];          // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
    filterAndRender();                         // ‚úÖ ‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡πÅ‡∏ó‡πá‡∏ö

  } catch (err) {
    console.error('Error loading activities:', err);
    showError(err.message, studentId);
  }
}

// ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÅ‡∏ó‡πá‡∏ö + ‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå
function filterAndRender() {
  const list = document.getElementById('activities-list');
  list.innerHTML = '';

  // ‡πÅ‡∏¢‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ + ‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  const items = allActivities.filter(a => {
    const life = getLifecycleState(a); // UPCOMING/IN_PROGRESS/ENDED
    if (currentFilter === 'upcoming') {
      return life === 'UPCOMING';
    } else if (currentFilter === 'inprogress') {
      return life === 'IN_PROGRESS';
    } else {
      // done tab: ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ñ‡∏∑‡∏≠ "‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß" + "‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
      return life === 'ENDED' && !!a.surveyCompleted;
    }
  });

  if (items.length === 0) {
    list.innerHTML = `<div class="empty-message">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ</div>`;
    return;
  }

  items.forEach(a => list.appendChild(createActivityElement(a)));
}

/* ---------- (‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥/‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏¥‡∏° ‚Äì ‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞) ----------

try {
  // Show loading state
  activitiesList.innerHTML = '<div class="loading">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>';
  // ...
} catch (error) {
  // ...
}

--------------------------------------------------------------- */

// Display activities list
function displayActivities(activities) {
  const activitiesList = document.getElementById('activities-list');

  // Clear existing content
  activitiesList.innerHTML = '';

  if (!activities || activities.length === 0) {
    // Show empty message with option to add sample data
    activitiesList.innerHTML = `
      <div class="empty-message">
        <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°</p>
        <p style="font-size: 0.9rem; color: #888; margin-top: 10px;">
          ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á ActivityParticipations<br>
          ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà studentId = ${currentUser.studentId || currentUser.userId}
        </p>
      </div>
    `;
    return;
  }

  // Create activity items
  activities.forEach(activity => {
    const activityElement = createActivityElement(activity);
    activitiesList.appendChild(activityElement);
  });
}

// Create single activity element
function createActivityElement(activity) {
  const element = document.createElement('div');
  element.className = 'activity-item';

  // Format date
  const formattedDate = formatDateTime(activity.startDateTime);

  // Determine button state
  const buttonState = getButtonState(activity);

  element.innerHTML = `
    <div class="activity-info">
      <div class="activity-name">${activity.name || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°'}</div>
      <div class="activity-date">${formattedDate}</div>
      <div class="activity-location">üìç ${activity.location || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà'}</div>
    </div>
    <button class="${buttonState.class}"
            data-activity-id="${activity.activityId}"
            data-action="${buttonState.action}"
            onclick="handleActivityAction('${activity.activityId}')"
            ${buttonState.disabled ? 'disabled' : ''}>
      ${buttonState.text}
    </button>
  `;

  return element;
}

// Format date and time
function formatDateTime(dateTimeString) {
  if (!dateTimeString) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤';

  try {
    const date = new Date(dateTimeString);
    return date.toLocaleDateString('th-TH', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  } catch (error) {
    return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
  }
}

// Get button state based on activity status
function getButtonState(a) {
  const life = getLifecycleState(a); // UPCOMING / IN_PROGRESS / ENDED
  const isConfirmed     = !!a.isConfirmed;
  const surveyCompleted = !!a.surveyCompleted;
  const quizCompleted   = !!a.quizCompleted;

  // 1) ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏° ‚Üí "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß" (disabled)
  if (life === 'UPCOMING') {
    return { class: 'activity-button', text: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß', disabled: true, action: 'none' };
  }

  // 2) ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏±‡∏î ‚Üí ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏Å‡∏î "‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°"
  if (life === 'IN_PROGRESS') {
    if (!isConfirmed) {
      return { class: 'activity-button active', text: '‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°', disabled: false, action: 'confirm' };
    }
    // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏±‡∏î: ‡∏¢‡∏±‡∏á‡∏£‡∏≠‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
    return { class: 'activity-button', text: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏≠‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°)', disabled: true, action: 'none' };
  }

  // 3) ‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô
  if (life === 'ENDED') {
    if (!isConfirmed) {
      // ‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‚Üí ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
      return { class: 'activity-button', text: '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°', disabled: true, action: 'none' };
    }
    if (!surveyCompleted) {
      // ‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô ‚Üí ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
      return { class: 'activity-button active', text: '‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô', disabled: false, action: 'survey' };
    }
    // ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡πÉ‡∏´‡πâ ‚Äú‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ö‡∏±‡∏ï‡∏£‚Äù (‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏Å‡∏î‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î)
    return { class: 'activity-button active', text: '‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ö‡∏±‡∏ï‡∏£', disabled: false, action: 'certificate' };
  }

  return { class: 'activity-button', text: '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', disabled: true, action: 'none' };
}

/* ============================================================
   MAIN: Handle activity button click
   - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å openCodeInput(activityId) ‚Üí openConfirmPopup(activityId)
   ============================================================ */
function handleActivityAction(activityId) {
  const button = document.querySelector(`button[data-activity-id="${activityId}"]`);
  if (!button || button.disabled) return;

  const action = button.dataset.action; // 'confirm' | 'survey' | 'certificate' | 'none'

  if (action === 'confirm') {
    // ‚úÖ ‡πÉ‡∏´‡∏°‡πà: ‡πÉ‡∏ä‡πâ popup ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏¥‡∏Å‡∏±‡∏î
    openConfirmPopup(activityId);
    return;
  }

  if (action === 'survey') {
    // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
    window.location.href = `Assessment.html?id=${activityId}`;
    return;
  }

  if (action === 'certificate') {
    // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤/‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏ö‡∏±‡∏ï‡∏£
    window.location.href = `certificate.html?id=${activityId}`;
    return;
  }
}

/* ============================================================
   ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏¥‡∏Å‡∏±‡∏î (Popup + Haversine + call backend)
   - ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á element ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå HTML ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
   ============================================================ */
let popupRefs = null;
let confirmContext = {
  activityId: null,
  centerLat: null,
  centerLon: null,
  radiusM: 200,
  userLat: null,
  userLon: null
};

function setupGeoPopupHandlers() {
  const popupEl = document.getElementById('popupConfirm');
  if (!popupEl) return; // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡πÜ reuse ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ

  popupRefs = {
    root: popupEl,
    btnConfirm: popupEl.querySelector('.btn-confirm'),
    btnClose: popupEl.querySelector('.btn-close'),
    mapFrame: popupEl.querySelector('#mapFrame'),
    locationText: popupEl.querySelector('#locationText'),
    radiusHint: popupEl.querySelector('#radiusHint'),
    titleEl: popupEl.querySelector('#popup-activity-name')
  };

  // ‡∏õ‡∏¥‡∏î popup
  popupRefs.btnClose.addEventListener('click', () => {
    popupRefs.root.style.display = 'none';
  });

  // ‡∏Å‡∏î ‚Äú‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‚Äù
  popupRefs.btnConfirm.addEventListener('click', onConfirmByGeo);
}

async function openConfirmPopup(activityId) {
  if (!popupRefs || !popupRefs.root) {
    alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î');
    return;
  }

  const activity = (allActivities || []).find(a => a.activityId === activityId);
  if (!activity) { alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°'); return; }

  // ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
  popupRefs.titleEl.textContent = activity.name || '';

  // ‚úÖ ‡∏´‡∏≤ center ‡∏à‡∏≤‡∏Å activity (‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å API)
  let centerLat = activity.locationLatitude || activity.locationLat || null;
  let centerLon = activity.locationLongitude || activity.locationLon || null;
  let radiusM  = activity.locationRadiusMeters || activity.radiusMeters || 200;

  // TODO (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô): ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ centerLat/Lon ‡πÅ‡∏•‡∏∞‡∏°‡∏µ activity.locationId ‡πÉ‡∏´‡πâ fetch ‡∏à‡∏≤‡∏Å /locations/{id}
  if (!centerLat || !centerLon) {
    alert('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°');
    return;
  }

  confirmContext = {
    activityId,
    centerLat: Number(centerLat),
    centerLon: Number(centerLon),
    radiusM: Number(radiusM) || 200,
    userLat: null,
    userLon: null
  };

  // ‡∏Ç‡∏≠‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  popupRefs.locationText.textContent = '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á...';
  popupRefs.radiusHint.textContent = `‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô ${confirmContext.radiusM} ‡πÄ‡∏°‡∏ï‡∏£‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°`;

  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      pos => {
        confirmContext.userLat = pos.coords.latitude;
        confirmContext.userLon = pos.coords.longitude;
        popupRefs.locationText.textContent =
          `‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏∏‡∏ì: ${confirmContext.userLat.toFixed(6)}, ${confirmContext.userLon.toFixed(6)}`;
        popupRefs.mapFrame.src =
          `https://maps.google.com/maps?q=${confirmContext.userLat},${confirmContext.userLon}&hl=th&z=16&output=embed`;
      },
      err => {
        console.error(err);
        popupRefs.locationText.textContent = '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ';
      }
    );
  } else {
    popupRefs.locationText.textContent = '‚ö†Ô∏è ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Geolocation';
  }

  // ‡πÅ‡∏™‡∏î‡∏á popup
  popupRefs.root.style.display = 'flex';
}

async function onConfirmByGeo() {
  const ctx = confirmContext;
  if (!ctx.userLat || !ctx.userLon) { alert('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì'); return; }

  const d = haversineMeters(ctx.userLat, ctx.userLon, ctx.centerLat, ctx.centerLon);
  if (d > ctx.radiusM) {
    alert(`‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (${d.toFixed(1)} ‡πÄ‡∏°‡∏ï‡∏£)`);
    return;
  }

  // ‚úÖ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å backend ‡πÄ‡∏û‡∏∑‡πà‡∏≠ mark isConfirmed=true
  try {
    const studentId = (currentUser.studentId || currentUser.userId);
    const url = CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.CONFIRM_ATTENDANCE;
    const res = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      },
      body: JSON.stringify({
        activityId: ctx.activityId,
        studentId,
        latitude: ctx.userLat,
        longitude: ctx.userLon,
        currentTime: new Date().toISOString()
      })
    });
    const result = await res.json();
    if (res.ok && result.success !== false) {
      alert('‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      popupRefs.root.style.display = 'none';
      loadUserActivities(studentId); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    } else {
      alert('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + (result.message || ''));
    }
  } catch (e) {
    console.error(e);
    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');
  }
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞ Haversine (‡πÄ‡∏°‡∏ï‡∏£)
function haversineMeters(lat1, lon1, lat2, lon2) {
  const R = 6371e3;
  const toRad = deg => deg * Math.PI / 180;
  const dœÜ = toRad(lat2 - lat1);
  const dŒª = toRad(lon2 - lon1);
  const œÜ1 = toRad(lat1);
  const œÜ2 = toRad(lat2);
  const a = Math.sin(dœÜ/2)**2 + Math.cos(œÜ1)*Math.cos(œÜ2)*Math.sin(dŒª/2)**2;
  return 2 * R * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
}

/* ============================================================
   (‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°) QR Modal / Verification ‚Äî ‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ
   ============================================================ */

// Open code input modal
function openCodeInput(activityId = null) {
  const modal = document.getElementById('code-modal');
  if (!modal) { console.warn('code-modal not found'); return; }
  modal.style.display = 'flex';

  if (activityId) {
    modal.dataset.activityId = activityId;
  }

  // Clear previous input and status
  const inputEl = document.getElementById('activity-code');
  if (inputEl) inputEl.value = '';
  hideStatusMessage();

  // Focus on input
  setTimeout(() => {
    const inputEl2 = document.getElementById('activity-code');
    if (inputEl2) inputEl2.focus();
  }, 300);
}

// Close code input modal
function closeCodeInput() {
  const modal = document.getElementById('code-modal');
  if (!modal) return;
  modal.style.display = 'none';

  // Clear activity ID
  delete modal.dataset.activityId;

  // Clear input and status
  const inputEl = document.getElementById('activity-code');
  if (inputEl) inputEl.value = '';
  hideStatusMessage();
}

// Submit activity code
async function submitActivityCode() {
  const codeInput = document.getElementById('activity-code');
  const activityCode = (codeInput ? codeInput.value : '').trim().toUpperCase();

  if (!activityCode) {
    showStatusMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°', 'error');
    return;
  }

  // Verify the code
  await verifyActivityCode(activityCode);
}

// Verify activity code with server
async function verifyActivityCode(activityCode) {
  const modal = document.getElementById('code-modal');
  const activityId = modal ? modal.dataset.activityId : undefined;
  const studentId = currentUser.studentId || currentUser.userId;

  try {
    showStatusMessage('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™...', 'processing');

    // First, validate the code format
    if (!isValidActivityCode(activityCode)) {
      showStatusMessage('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ACT001QR4T25X)', 'error');
      return;
    }

    // Check if user is registered for activities with this code (client-side pre-check)
    const preCheckResult = await preCheckRegistration(activityCode, studentId);
    if (!preCheckResult.success) {
      showStatusMessage(preCheckResult.message, 'error');
      return;
    }

    // Build API URL
    const apiUrl = CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.VERIFY_QR;

    // Prepare request data
    const requestData = {
      qrCode: activityCode,
      studentId: studentId,
      currentTime: new Date().toISOString() // ‡∏™‡πà‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
    };

    if (activityId) {
      requestData.activityId = activityId;
    }

    // Make API request
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      },
      body: JSON.stringify(requestData)
    });

    const result = await response.json();

    if (result.success) {
      handleSuccessfulVerification(result, activityId);
    } else {
      handleFailedVerification(result.message);
    }

  } catch (error) {
    console.error('Code verification error:', error);
    showStatusMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠', 'error');
  }
}

// Validate activity code format
function isValidActivityCode(code) {
  // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ACT###QR#T##X (‡πÄ‡∏ä‡πà‡∏ô ACT001QR4T25X)
  const pattern = /^ACT\d{3}QR\d{1}T\d{2}X$/;
  return pattern.test(code);
}

// Pre-check if user is registered for this activity
async function preCheckRegistration(activityCode, studentId) {
  try {
    // Get current user activities
    const apiUrl = CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.STUDENT_ACTIVITIES.replace('{studentId}', studentId);

    const response = await fetch(apiUrl, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      return { success: false, message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ' };
    }

    const activities = await response.json();

    // Find activity with matching QR code
    const matchingActivity = activities.find(activity => activity.qrCode === activityCode);

    if (!matchingActivity) {
      return {
        success: false,
        message: '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°'
      };
    }

    // Check if already confirmed
    if (matchingActivity.isConfirmed) {
      return {
        success: false,
        message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß'
      };
    }

    return {
      success: true,
      activity: matchingActivity,
      message: '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÑ‡∏î‡πâ'
    };

  } catch (error) {
    console.error('Pre-check error:', error);
    return { success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' };
  }
}

// Handle successful verification
function handleSuccessfulVerification(result, activityId) {
  showStatusMessage(result.message || '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');

  // ‚≠ê Update button to show "‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô" state
  if (activityId) {
    updateButtonToAssessmentState(activityId);
  }

  // Close modal after delay and refresh activities
  setTimeout(() => {
    closeCodeInput();
    const studentId = currentUser.studentId || currentUser.userId;
    loadUserActivities(studentId);
  }, 2000);
}

// ‚≠ê NEW FUNCTION: Update button to assessment state
function updateButtonToAssessmentState(activityId) {
  const button = document.querySelector(`button[data-activity-id="${activityId}"]`);
  if (button) {
    button.classList.add('active');
    button.textContent = '‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô';
    button.disabled = false;
    console.log(`Updated button for activity ${activityId} to assessment state`);
  }
}

// Handle failed verification
function handleFailedVerification(message) {
  showStatusMessage(message || '‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà', 'error');
}

// Show status message
function showStatusMessage(message, type) {
  const statusElement = document.getElementById('status-message');
  if (!statusElement) return;
  statusElement.textContent = message;
  statusElement.style.display = 'block';

  // Remove existing classes
  statusElement.className = 'status-message';

  // Add type class
  if (type === 'success') {
    statusElement.classList.add('status-success');
  } else if (type === 'error') {
    statusElement.classList.add('status-error');
  } else if (type === 'processing') {
    statusElement.classList.add('status-processing');
  }
}

// Hide status message
function hideStatusMessage() {
  const statusElement = document.getElementById('status-message');
  if (!statusElement) return;
  statusElement.style.display = 'none';
}

// Add Enter key support for code input
document.addEventListener('keypress', function(e) {
  const modal = document.getElementById('code-modal');
  if (e.key === 'Enter' && modal && modal.style.display === 'flex') {
    submitActivityCode();
  }
});

// Show error message
function showError(message, studentId) {
  const activitiesList = document.getElementById('activities-list');
  activitiesList.innerHTML = `
    <div class="error-message">
      <p>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
      <p>${message}</p>
      <button class="retry-btn" onclick="loadUserActivities('${studentId}')">‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</button>
    </div>
  `;
}

// Navigate to other pages
function navigateTo(page) {
  window.location.href = page;
}

// Show user menu
function showUserMenu() {
  const confirmLogout = confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?');
  if (confirmLogout) {
    localStorage.removeUser('userData');
    localStorage.removeItem('token');
    redirectToLogin();
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏≠‡∏≤‡∏ó‡πå
function logout() {
  const confirmLogout = confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?');
  if (confirmLogout) {
    localStorage.removeItem('userData');
    localStorage.removeItem('token');
    window.location.href = "login.html";
  }
}
