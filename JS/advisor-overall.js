    document.addEventListener("DOMContentLoaded", async () => {
      const params = new URLSearchParams(window.location.search);
      const activityId = params.get("activityId");

      if (!activityId) {
        console.error("No activityId provided");
        document.querySelector(".activity-title").textContent = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°";
        return;
      }

      console.log("Loading activity details for:", activityId);

      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        const userData = JSON.parse(localStorage.getItem('userData') || '{}');
        const token = localStorage.getItem('token');
        
        if (!userData.userId || userData.role !== 'advisor' || !token) {
          console.error('Authentication failed or not advisor');
          window.location.href = "login.html";
          return;
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å Activities API
        console.log("Fetching activity details...");
        const activityResponse = await fetch(
          `https://mb252cstbb.execute-api.us-east-1.amazonaws.com/prod/activities/${activityId}`,
          {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          }
        );

        if (!activityResponse.ok) {
          throw new Error(`Failed to fetch activity: ${activityResponse.status} ${activityResponse.statusText}`);
        }

        const activityData = await activityResponse.json();
        console.log("Activity data:", activityData);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
        const activityTitle = document.querySelector(".activity-title");
        if (activityTitle) {
          activityTitle.textContent = activityData.name || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°";
        }

        // === New: ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ===
        const detailSection = document.querySelector(".activity-detail");
        if (detailSection) {
          let detailHtml = `
            <h3>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</h3>
            <div class="detail-box">
              <p>${activityData.description || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°'}</p>
          `;

          // ===== ‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏±‡∏Å‡∏©‡∏∞ (Skill Category) =====
          if (skill.category) {
            const badgeColor =
              skill.category === 'soft skill'
                ? '#FF6B6B'
                : skill.category === 'hard skill'
                ? '#4ECDC4'
                : '#95A5A6';
            const badgeName =
              skill.category === 'soft skill'
                ? 'Soft Skill'
                : skill.category === 'hard skill'
                ? 'Hard Skill'
                : 'Multi Skill';
            detailHtml += `
              <p style="margin-top: 10px;">
                <span class="badge" style="background:${badgeColor};">
                  ${badgeName}
                </span>
              </p>
            `;
          }

          // ===== ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å (Skill Level) =====
          if (skill.skillLevel) {
            let levelColor = '#95A5A6';
            if (skill.skillLevel === '‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô') levelColor = '#4CAF50';     // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            else if (skill.skillLevel === '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á') levelColor = '#FFC107'; // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
            else if (skill.skillLevel === '‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á') levelColor = '#F44336'; // ‡πÅ‡∏î‡∏á

            detailHtml += `
              <p style="margin-top: 10px;">
                <span class="badge" style="background:${levelColor};">
                  ‡∏£‡∏∞‡∏î‡∏±‡∏ö: ${skill.skillLevel}
                </span>
              </p>
            `;
          }

          detailHtml += `</div>`;
          detailSection.innerHTML = detailHtml;
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏à‡∏≤‡∏Å API ‡πÉ‡∏´‡∏°‡πà
        console.log("Fetching participation stats...");
        const participantsResponse = await fetch(
          `https://mb252cstbb.execute-api.us-east-1.amazonaws.com/prod/activities/${activityId}/participants`,
          {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          }
        );

        let participantCount = 0;
        let confirmedCount = 0;
        let surveyCompletedCount = 0;
        let participants = [];

        if (participantsResponse.ok) {
          const participantsData = await participantsResponse.json();
          console.log("Participants data:", participantsData);
          
          if (participantsData.statistics) {
            participantCount = participantsData.statistics.totalRegistered || 0;
            confirmedCount = participantsData.statistics.totalConfirmed || 0;
            surveyCompletedCount = participantsData.statistics.totalSurveyCompleted || 0;
          }
          
          if (participantsData.participants) {
            participants = participantsData.participants;
          }
        } else {
          console.warn("Failed to fetch participants data");
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
        const countElem = document.querySelector(".participant-count");
        if (countElem) {
          if (participantCount > 0) {
            countElem.innerHTML = `
              <div style="background: #f8f9fa; padding: 15px; border-radius: 10px; border-left: 4px solid #4CAF50;">
                <h4 style="margin: 0 0 10px 0; color: #333;">üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°</h4>
                <p style="margin: 5px 0;"><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£:</strong> ${participantCount} ‡∏Ñ‡∏ô</p>
                <p style="margin: 5px 0;"><strong>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß:</strong> ${confirmedCount} ‡∏Ñ‡∏ô</p>
                <p style="margin: 5px 0;"><strong>‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô:</strong> ${participantCount - confirmedCount} ‡∏Ñ‡∏ô</p>
                <p style="margin: 5px 0;"><strong>‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß:</strong> ${surveyCompletedCount} ‡∏Ñ‡∏ô</p>
              </div>
              ${participants.length > 0 ? generateParticipantsList(participants) : ''}
            `;
          } else {
            countElem.innerHTML = `
              <div style="background: #fff3cd; padding: 15px; border-radius: 10px; border-left: 4px solid #ffc107;">
                <p style="margin: 0;"><strong>üìù ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ</strong></p>
              </div>
            `;
          }
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
        const additionalInfo = document.querySelector(".additional-info");
        if (additionalInfo) {
          const infoHtml = `
            <div style="margin-top: 20px; padding: 15px; background: #e8f5e8; border-radius: 10px;">
              <h4 style="margin: 0 0 10px 0; color: #2e7d32;">‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</h4>
              <p><strong>üéØ ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</strong> ${activityData.activityGroup || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
              <p><strong>üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°:</strong> ${formatDateTime(activityData.startDateTime)}</p>
              <p><strong>üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î:</strong> ${formatDateTime(activityData.endDateTime)}</p>
              <p><strong>üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:</strong> ${activityData.locationName || activityData.location || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
              ${activityData.organizerId ? `<p><strong>üë§ ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î:</strong> ${activityData.organizerId}</p>
              <p><strong>üéì ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ:</strong> ${activityData.yearLevel ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
              <p><strong>üß© ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°:</strong> ${activityData.requiredActivities || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}</p>` : ''}
            </div>
          `;
          
          additionalInfo.innerHTML = infoHtml;
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏Å‡∏©‡∏∞ (PLO) ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ‚Äî ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        const skillSection = document.querySelector(".skill-list");
        const skill = activityData.skill || {};

        if (skillSection) {
          // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ä‡∏∑‡πà‡∏≠ PLO ‡πÅ‡∏ö‡∏ö array
          const names = Array.isArray(skill.ploFullNames)
            ? skill.ploFullNames
            : (skill.ploFullNames ? [skill.ploFullNames] : []);

          // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (ploDescriptions) ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏ß‡∏° (description)
          const descs = Array.isArray(skill.ploDescriptions)
            ? skill.ploDescriptions
            : (skill.ploDescriptions ? [skill.ploDescriptions] : []);
          const fallbackDesc = skill.description || '';

          if (names.length > 0) {
            skillSection.innerHTML = names.map((name, idx) => {
              const desc = (descs[idx] !== undefined && descs[idx] !== null && String(descs[idx]).trim() !== '')
                ? descs[idx]
                : fallbackDesc;

              return `
                <div class="skill-item" style="margin-bottom:14px;">
                  <p>üéØ <strong>${name}</strong></p>
                  ${desc ? `<p style="margin-top: 10px; color: #666;">${desc}</p>` : ''}
                </div>
              `;
            }).join('');
          } else {
            skillSection.innerHTML = `<p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á</p>`;
          }
        }

      } catch (err) {
        console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        const activityTitle = document.querySelector(".activity-title");
        if (activityTitle) {
          activityTitle.textContent = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
        }
        
        const countElem = document.querySelector(".participant-count");
        if (countElem) {
          countElem.innerHTML = `
            <div style="background: #ffebee; padding: 15px; border-radius: 10px; border-left: 4px solid #f44336;">
              <p style="margin: 0; color: #c62828;"><strong>‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:</strong> ${err.message}</p>
              <button onclick="window.location.reload()" style="margin-top: 10px; padding: 8px 15px; background: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer;">
                üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
              </button>
            </div>
          `;
        }
      }
    });

    // Helper function to format date/time
    function formatDateTime(dateTimeString) {
      if (!dateTimeString) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
      
      try {
        const date = new Date(dateTimeString);
        return date.toLocaleDateString('th-TH', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });
      } catch (error) {
        return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
      }
    }

    // Helper function to generate participants list
    function generateParticipantsList(participants) {
      if (!participants || participants.length === 0) {
        return '';
      }

      let html = `
        <div style="margin-top: 20px; background: white; padding: 15px; border-radius: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
          <h4 style="margin: 0 0 15px 0; color: #333;">üë• ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°</h4>
          <div style="max-height: 300px; overflow-y: auto;">
      `;

      participants.forEach((participant, index) => {
        const statusColor = participant.isConfirmed ? '#4CAF50' : '#FF9800';
        const statusText = participant.isConfirmed ? '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß' : '‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô';
        const surveyStatus = participant.surveyCompleted ? '‚úÖ ‡∏ó‡∏≥‡πÅ‡∏•‡πâ‡∏ß' : '‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≥';

        html += `
          <div style="display: flex; justify-content: space-between; align-items: center; padding: 10px; border-bottom: 1px solid #eee; ${index === participants.length - 1 ? 'border-bottom: none;' : ''}">
            <div>
              <div style="font-weight: bold; color: #333;">${participant.studentName}</div>
              <div style="font-size: 0.9rem; color: #666;">
                ‡∏£‡∏´‡∏±‡∏™: ${participant.studentId} | ‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ: ${participant.studentYear} | ${participant.studentDepartment}
              </div>
              <div style="font-size: 0.8rem; color: #888;">
                ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${formatDateTime(participant.registeredAt)}
              </div>
            </div>
            <div style="text-align: right;">
              <div style="background: ${statusColor}; color: white; padding: 4px 8px; border-radius: 10px; font-size: 0.8rem; margin-bottom: 4px;">
                ${statusText}
              </div>
              <div style="font-size: 0.8rem; color: #666;">
                ‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô: ${surveyStatus}
              </div>
            </div>
          </div>
        `;
      });

      html += `
          </div>
        </div>
      `;

      return html;
    }

    // Navigation functions
    function navigateTo(page) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ token ‡πÅ‡∏•‡∏∞ userData ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const token = localStorage.getItem('token');
      const userData = JSON.parse(localStorage.getItem('userData') || '{}');
      
      if (!token || !userData.userId) {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡∏´‡∏£‡∏∑‡∏≠ userData ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
        window.location.href = 'login.html';
        return;
      }

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ token ‡πÅ‡∏•‡∏∞ userData ‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      window.location.href = page;
    }

    function goBack() {
      window.history.back();
    }

    function logout() {
      const confirmLogout = confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?');
      if (confirmLogout) {
        localStorage.removeItem('userData');
        localStorage.removeItem('token');
        window.location.href = "login.html";
      }
    }

  // === ‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° POP-UP ===
  const deleteModal = document.getElementById('delete-modal');
  const mainDeleteBtn = document.querySelector('.delete-btn');
  const cancelBtn = document.getElementById('cancel-btn');
  const confirmDeleteBtn = document.getElementById('confirm-delete-btn');

  mainDeleteBtn.addEventListener('click', () => {
    deleteModal.style.display = 'flex'; // ‡πÅ‡∏™‡∏î‡∏á pop-up
  });

  cancelBtn.addEventListener('click', () => {
    deleteModal.style.display = 'none'; // ‡∏ã‡πà‡∏≠‡∏ô pop-up
  });

  confirmDeleteBtn.addEventListener('click', () => {
    console.log(`Confirmed deletion for activity ID: ${activityId}`); // ‡πÉ‡∏™‡πà Logic ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    deleteModal.style.display = 'none'; // ‡∏ã‡πà‡∏≠‡∏ô pop-up
  });

  window.addEventListener('click', (event) => {
    if (event.target == deleteModal) {
      deleteModal.style.display = 'none';
    }
  });
  // === ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô POP-UP ===