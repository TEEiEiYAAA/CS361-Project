        // Configuration - ‡πÅ‡∏Å‡πâ URL ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö API Gateway ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        const CONFIG = {
            API_BASE_URL: 'https://mb252cstbb.execute-api.us-east-1.amazonaws.com/prod',
            ENDPOINTS: {
                GET_ACTIVITIES: '/activities',
                REGISTER_ACTIVITY: '/activities/register'
            }
        };
        
        // Global variables
        let allActivities = [];
        let currentFilter = 'all';
        let currentUser = null;
        
        // Initialize application
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
        });
        
        // Initialize the application
        function initializeApp() {
            // Check login status
            currentUser = JSON.parse(localStorage.getItem('userData') || '{}');
            
            if (!currentUser.studentId && !currentUser.userId) {
                window.location.href = "login.html";
                return;
            }
            
            // Setup tab buttons
            setupTabButtons();
            
            // Load activities
            loadActivities();
        }
        
        // Setup tab button event listeners
        function setupTabButtons() {
            const tabButtons = document.querySelectorAll('.tab-btn');
            
            tabButtons.forEach(button => {
                button.addEventListener('click', function() {
                    // Remove active class from all buttons
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    
                    // Add active class to clicked button
                    this.classList.add('active');
                    
                    // Update current filter
                    currentFilter = this.dataset.filter;
                    
                    // Filter and display activities
                    filterActivities();
                });
            });
        }

        // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á array, string JSON ["PLO1","PLO2"] ‡πÅ‡∏•‡∏∞ string "PLO1,PLO2"
        function extractPLOs(activity) {
            const raw = activity.plo || activity.plos || activity.PLO || activity.PLOs || [];
            if (Array.isArray(raw)) return raw.map(x => String(x).trim().toUpperCase());
        
            if (typeof raw === 'string') {
            const s = raw.trim();
            try {
                const parsed = JSON.parse(s);
                if (Array.isArray(parsed)) return parsed.map(x => String(x).trim().toUpperCase());
            } catch (_) {}
            return s.split(',').map(x => x.trim().toUpperCase()).filter(Boolean);
            }
            return [];
        }
        
        function matchesPLO(activity, ploCode) {
            if (!ploCode || ploCode === 'all') return true;
            const plos = extractPLOs(activity);
            return plos.includes(String(ploCode).toUpperCase());
        }
        
        
        // Load activities from API
        async function loadActivities(skillType = null) {
            const activitiesList = document.getElementById('activities-list');
            
            try {
                // Show loading state
                activitiesList.innerHTML = '<div class="loading">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°...</div>';
                
                // Build API URL
                let apiUrl = CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.GET_ACTIVITIES;
                
                // Add skill type filter if specified
                if (skillType && skillType !== 'all') {
                    apiUrl += `?plo=${encodeURIComponent(skillType)}`;
                  }
                
                // Make API request
                const response = await fetch(apiUrl, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`,
                        'Content-Type': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                //const activities = await response.json();
                let activities = await response.json();

                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å PLO (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà all) ‡πÉ‡∏´‡πâ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏ö‡∏ö "contains"
                if (currentFilter && currentFilter !== 'all') {
                activities = activities.filter(a => matchesPLO(a, currentFilter));
                }

                console.log('Activities loaded:', activities.length);
                
                // Store activities globally
                allActivities = activities;
                
                // Display activities
                displayActivities(activities);
                
            } catch (error) {
                console.error('Error loading activities:', error);
                showError(error.message);
            }
        }
        
        function filterActivities() {
            // ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏™‡∏°‡∏≠ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤ filter ‡πÉ‡∏î
            if (currentFilter === 'all') {
                loadActivities(); // ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            } else {
                loadActivities(currentFilter); // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
            }
        }
        
        // Display activities in the grid
        function displayActivities(activities) {
            const activitiesList = document.getElementById('activities-list');
            
            if (!activities || activities.length === 0) {
                activitiesList.innerHTML = `
                    <div class="empty-message">
                        <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ</p>
                        <p style="font-size: 0.9rem; color: #888; margin-top: 10px;">
                            ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏î‡∏π‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
                        </p>
                    </div>
                `;
                return;
            }
            
            // Create activities grid
            let html = '<div class="activities-grid">';
            
            activities.forEach(activity => {
                html += createActivityCard(activity);
            });
            
            html += '</div>';
            
            activitiesList.innerHTML = html;
        }

        function normalizeLevel(levelRaw) {
            const s = String(levelRaw || '').trim().toLowerCase();
            if (!s) return '';
            if (['‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô','basic'].includes(s)) return '‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô';
            if (['‡∏Å‡∏•‡∏≤‡∏á','‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á','medium'].includes(s)) return '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
            if (['‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á','advanced'].includes(s)) return '‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á';
            return s;
          }
          function getLevelDisplay(levelRaw) { return normalizeLevel(levelRaw); }
          function getLevelClass(levelRaw) {
            const lv = normalizeLevel(levelRaw);
            if (lv === '‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô') return 'level-basic';
            if (lv === '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á') return 'level-medium';
            if (lv === '‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á')  return 'level-advanced';
            return '';
          }
          
        
        // Create individual activity card HTML
        function createActivityCard(activity) {
            // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            const startTxt = formatDateTime(activity.startDateTime);
            const endTxt   = formatDateTime(activity.endDateTime);
            const dateRange = activity.endDateTime ? `${startTxt} ‚Äì ${endTxt}` : startTxt;
          
            // ‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏±‡∏Å‡∏©‡∏∞
            const skillCategory = activity.skillCategory || '';
            const skillBadgeClass = skillCategory.toLowerCase().replace(' ', '-');
            const skillDisplayName =
              skillCategory === 'soft skill'  ? 'Soft Skill'  :
              skillCategory === 'hard skill'  ? 'Hard Skill'  :
              skillCategory === 'multi-skill' ? 'Multi-Skill' : '‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ';
          
            // ‡∏£‡∏∞‡∏î‡∏±‡∏ö (skillLevel)
            const levelDisplay = getLevelDisplay(activity.skillLevel);
            const levelClass   = getLevelClass(activity.skillLevel);
            const levelBadge   = levelDisplay ? `<div class="level-badge ${levelClass}">${levelDisplay}</div>` : '';
          
            // ‡∏£‡∏π‡∏õ
            const imageUrl = activity.imageUrl || null;
            const imageHtml = imageUrl ? `style="background-image: url('${imageUrl}')"` : '';
            const placeholderIcon = imageUrl ? '' : 'üñºÔ∏è';
          
            // PLO (‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°)
            const ploNames = Array.isArray(activity.ploFullNames) ? activity.ploFullNames : [];
            const ploHtml = ploNames.length
              ? `<div class="plo-section">
                   <div class="plo-title">‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:</div>
                   <div class="plo-values">
                     ${ploNames.map(n => `<div class="plo-item">‚Ä¢ ${n}</div>`).join('')}
                   </div>
                 </div>`
              : '';
          
            // ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î
            const buttonsHtml = `
              <div class="card-actions">
                <button class="btn btn-detail"
                  onclick="event.stopPropagation(); window.location.href='advisor-overall.html?activityId=${activity.activityId}'">
                  ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                </button>
                <button class="btn btn-edit"
                  onclick="event.stopPropagation(); window.location.href='edit-activity.html?id=${activity.activityId}'">
                  ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                </button>
              </div>
            `;
          
            return `
              <div class="activity-card" onclick="viewActivityDetail('${activity.activityId}')" style="cursor:pointer;">
                <div class="activity-image" ${imageHtml}>
                  ${placeholderIcon}
                  ${levelBadge}
                  ${skillCategory ? `<div class="skill-badge ${skillBadgeClass}">${skillDisplayName}</div>` : ''}
                </div>
                <div class="activity-content">
                  <h3 class="activity-title">${activity.name || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°'}</h3>
                  <p class="activity-description">${activity.description || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢'}</p>
                  <div class="activity-meta">
                    <div class="activity-date">üìÖ ${dateRange}</div>
                    <div class="activity-location">üìç ${activity.locationName || activity.location || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà'}</div>
                  </div>
                  ${ploHtml}
                  ${buttonsHtml}
                </div>
              </div>
            `;
          }                    
        
        // Format date and time
        function formatDateTime(dateTimeString) {
            if (!dateTimeString) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤';
            
            try {
                const date = new Date(dateTimeString);
                return date.toLocaleDateString('th-TH', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            } catch (error) {
                return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
            }
        }
        
        // View activity detail
        function viewActivityDetail(activityId) {
            // Navigate to detailed activity page with activity ID
            window.location.href = `advisor-overall.html?activityId=${activityId}`;
        }
        
        // Show error message
        function showError(message) {
            const activitiesList = document.getElementById('activities-list');
            activitiesList.innerHTML = `
                <div class="error-message">
                    <p>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</p>
                    <p>${message}</p>
                    <button class="retry-btn" onclick="loadActivities()">‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</button>
                </div>
            `;
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô navigateTo ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô <script>
        function navigateTo(page) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ token ‡πÅ‡∏•‡∏∞ userData ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const token = localStorage.getItem('token');
        const userData = JSON.parse(localStorage.getItem('userData') || '{}');
        
        if (!token || !userData.userId) {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡∏´‡∏£‡∏∑‡∏≠ userData ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
            window.location.href = 'login.html';
            return;
        }

        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ token ‡πÅ‡∏•‡∏∞ userData ‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        window.location.href = page;
        }
        
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏≠‡∏≤‡∏ó‡πå
        function logout() {
            const confirmLogout = confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?');
            if (confirmLogout) {
                localStorage.removeItem('userData');
                localStorage.removeItem('token');
                window.location.href = "login.html";
            }
        }
        
