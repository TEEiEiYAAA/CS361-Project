// Configuration
const CONFIG = {
  API_BASE_URL: 'https://mb252cstbb.execute-api.us-east-1.amazonaws.com/prod',
  ENDPOINTS: {
    GET_ACTIVITY_DETAIL: '/activities/{activityId}',
    REGISTER_ACTIVITY: '/activities/register'
  }
};

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°: map ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á PLO
const PLO_NAME_MAP = {
  PLO1: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°',
  PLO2: '‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏ö',
  PLO3: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏£‡∏¥‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û',
  PLO4: '‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏ß‡∏∞‡∏ú‡∏π‡πâ‡∏ô‡∏≥',
};

let currentActivity = null;
let currentUser = null;

document.addEventListener('DOMContentLoaded', function() {
  initializeApp();
});

function initializeApp() {
  currentUser = JSON.parse(localStorage.getItem('userData') || '{}');
  if (!currentUser.studentId && !currentUser.userId) {
    window.location.href = "login.html";
    return;
  }

  const urlParams = new URLSearchParams(window.location.search);
  const activityId = urlParams.get('id');
  if (!activityId) {
    showError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå');
    return;
  }
  loadActivityDetail(activityId);
}

async function loadActivityDetail(activityId) {
  const mainContent = document.getElementById('main-content');
  try {
    mainContent.innerHTML = '<div class="loading">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°...</div>';
    const apiUrl = CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.GET_ACTIVITY_DETAIL.replace('{activityId}', activityId);
    const response = await fetch(apiUrl, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      }
    });
    if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);

    const activity = await response.json();
    currentActivity = activity;
    displayActivityDetail(activity);
  } catch (error) {
    console.error('Error loading activity detail:', error);
    showError(error.message, activityId);
  }
}

// ‚úÖ helper: format / extract
function formatDateTime(dateTimeString) {
  if (!dateTimeString) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤';
  try {
    const date = new Date(dateTimeString);
    return date.toLocaleDateString('th-TH', {
      year: 'numeric', month: 'long', day: 'numeric',
      hour: '2-digit', minute: '2-digit'
    });
  } catch {
    return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
  }
}

function extractPLOs(activity) {
  const raw = activity.plo || [];
  if (Array.isArray(raw)) return raw.map(x => String(x).trim().toUpperCase());
  if (typeof raw === 'string') {
    try { const parsed = JSON.parse(raw); if (Array.isArray(parsed)) return parsed.map(x => String(x).trim().toUpperCase()); } catch {}
    return raw.split(',').map(x => x.trim().toUpperCase()).filter(Boolean);
  }
  return [];
}

function getLevelDisplay(levelRaw) {
  const level = (levelRaw || '').trim();
  if (!level) return '';
  return level === '‡∏Å‡∏•‡∏≤‡∏á' ? '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' : level;
}

// Display activity details
function displayActivityDetail(activity) {
  const mainContent = document.getElementById('main-content');

  const startDate = formatDateTime(activity.startDateTime);
  const endDate   = formatDateTime(activity.endDateTime);

  // ‚úÖ ‡πÉ‡∏ä‡πâ skillCategory ‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (fallback ‡πÄ‡∏õ‡πá‡∏ô skill.category)
  const skillCategory = activity.skillCategory || activity.skill?.category || '';
  const skillBadgeClass = (skillCategory || '').toLowerCase().replace(/\s+/g, '-');
  const skillDisplayName =
    skillCategory === 'soft skill'  ? 'Soft Skill'  :
    skillCategory === 'hard skill'  ? 'Hard Skill'  :
    skillCategory === 'multi-skill' ? 'Multi-Skill' : '‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ';

  // ‚úÖ badge ‡∏£‡∏∞‡∏î‡∏±‡∏ö
  const levelDisplay = getLevelDisplay(activity.level);
  const levelBadge   = levelDisplay ? `<span class="level-badge">${levelDisplay}</span>` : '';

  // ‡∏£‡∏π‡∏õ
  const imageUrl = activity.imageUrl || null;
  const imageHtml = imageUrl
    ? `<img src="${imageUrl}" alt="${activity.name}" class="skill-image">`
    : `<div class="img-placeholder">üñºÔ∏è</div>`;

  // ‚úÖ PLO ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°
  const plos = extractPLOs(activity);
  const ploFullNames = plos.map(code => PLO_NAME_MAP[code] || code);
  const ploBlock = ploFullNames.length
    ? `<div class="plo-box">
         <div class="sec-title">üéØ ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö</div>
         <div class="sec-body">
           ${activity.activityGroup ? `<p><strong>‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</strong> ${activity.activityGroup}</p>` : ''}
           ${ploFullNames.map((n, i) => {
              const code = plos[i] || '';
              // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏¢‡∏Å‡∏°‡∏≤‡πÉ‡∏ô activity.ploDescriptions ‡∏à‡∏∞‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢
              const desc = Array.isArray(activity.ploDescriptions) && activity.ploDescriptions[i]
                           ? ` ‚Äî ${activity.ploDescriptions[i]}` : '';
              return `<div class="plo-line"><strong>${code}</strong>: ${n}${desc}</div>`;
            }).join('')}
           ${activity.suitableYearLevel ? `<p><strong>‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ:</strong> ${activity.suitableYearLevel}</p>` : ''}
           ${activity.requiredActivities ? `<p><strong>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°:</strong> ${activity.requiredActivities} ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</p>` : ''}
         </div>
       </div>`
    : '';

  // ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£: ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  const now = new Date();
  const start = activity.startDateTime ? new Date(activity.startDateTime) : null;
  const end   = activity.endDateTime ? new Date(activity.endDateTime)   : null;
  let canRegister = true, btnText = '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°';
  if (start && now >= start) {
    canRegister = false;
    btnText = (end && now <= end) ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°' : '‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß';
  }

  mainContent.innerHTML = `
    <div class="detail-card">
      ${imageHtml}

      <div class="title-row">
        <h2 class="activity-name">${activity.name || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°'}</h2>
        <div class="badges-row">
          ${skillCategory ? `<span class="skill-badge ${skillBadgeClass}">${skillDisplayName}</span>` : ''}
          ${levelBadge}
        </div>
      </div>

      <p class="activity-desc">${activity.description || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢'}</p>

      <div class="time-box">
        <div class="sec-title">üìÖ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ß‡∏•‡∏≤</div>
        <div class="sec-body">
          <p><strong>‡πÄ‡∏£‡∏¥‡πà‡∏°:</strong> ${startDate}</p>
          <p><strong>‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î:</strong> ${endDate}</p>
          <p><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:</strong> ${activity.location || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà'}</p>
        </div>
      </div>

      ${ploBlock}

      <button type="button" id="registerBtn" class="join-button" ${canRegister ? '' : 'disabled'}>
        ${btnText}
      </button>
    </div>
  `;

  // bind ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£
  const registerBtn = document.getElementById('registerBtn');
  if (canRegister) {
    registerBtn.onclick = registerForActivity;
  }
}

// Register for activity
async function registerForActivity() {
  if (!currentActivity) return alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°');

  const studentId = currentUser.studentId || currentUser.userId;
  const registerBtn = document.getElementById('registerBtn');

  if (!confirm(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° "${currentActivity.name}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ?`)) return;

  registerBtn.disabled = true;
  registerBtn.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£...';

  try {
    const apiUrl = CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.REGISTER_ACTIVITY;
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json','Authorization': `Bearer ${localStorage.getItem('token')}` },
      body: JSON.stringify({ activityId: currentActivity.activityId, studentId })
    });
    const result = await response.json();

    if (result.success) {
      alert('‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô...');
      registerBtn.textContent = '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß';
      registerBtn.style.backgroundColor = '#4CAF50';
      setTimeout(() => { window.location.href = 'my-activities.html'; }, 1200);
    } else {
      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${result.message}`);
      registerBtn.disabled = false;
      registerBtn.textContent = '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°';
    }
  } catch (error) {
    console.error('Registration error:', error);
    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°');
    registerBtn.disabled = false;
    registerBtn.textContent = '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°';
  }
}

// Show error message
function showError(message, activityId = null) {
  const mainContent = document.getElementById('main-content');
  mainContent.innerHTML = `
    <div class="error-message">
      <p>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</p>
      <p>${message}</p>
      ${activityId ? `<button class="retry-btn" onclick="loadActivityDetail('${activityId}')">‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</button>` : ''}
      <button class="retry-btn" onclick="window.history.back()" style="background-color: #6c757d; margin-left: 10px;">‡∏Å‡∏•‡∏±‡∏ö</button>
    </div>
  `;
}

// Logout via icon
function showUserMenu() {
  const confirmLogout = confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?');
  if (confirmLogout) {
    localStorage.removeItem('userData');
    localStorage.removeItem('token');
    window.location.href = "login.html";
  }
}
