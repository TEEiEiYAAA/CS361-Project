// Configuration
const API_BASE_URL = 'https://mb252cstbb.execute-api.us-east-1.amazonaws.com/prod';
const REQUIRED_ACTIVITIES_COUNT = 3;

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
document.addEventListener('DOMContentLoaded', function() {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const dataParam = urlParams.get('data');
    
    if (!dataParam) {
        console.error('No session data found');
        window.location.href = "login.html";
        return;
    }
    
    try {
        // ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å URL
        const decodedData = decodeURIComponent(atob(dataParam));
        const sessionData = JSON.parse(decodedData);
        
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡πÉ‡∏ô window object
        window.userData = sessionData.user;
        window.userToken = sessionData.token;
        
        console.log('User data loaded:', window.userData);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô student
        if (window.userData.role !== 'student') {
            console.error('Authentication failed - not a student:', window.userData.role);
            alert('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ');
            window.location.href = "login.html";
            return;
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        const username = window.userData.name || window.userData.userId;
        document.getElementById('user-icon').title = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, " + username;
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏à‡∏≤‡∏Å API
        const studentId = window.userData.studentId || window.userData.userId;
        loadAllSkillData(studentId);
        
    } catch (error) {
        console.error('Error loading user data:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Login ‡πÉ‡∏´‡∏°‡πà');
        window.location.href = "login.html";
    }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô navigateTo
function navigateTo(page) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!window.userToken || !window.userData) {
        window.location.href = 'login.html';
        return;
    }

    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠
    const sessionData = {
        token: window.userToken,
        user: window.userData
    };
    const userDataEncoded = btoa(encodeURIComponent(JSON.stringify(sessionData)));

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ session ‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏° data
    window.location.href = `${page}?data=${userDataEncoded}`;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏à‡∏≤‡∏Å API
async function fetchStudentInfo(studentId) {
    try {
        const apiUrl = `${API_BASE_URL}/students/${studentId}/info`;
        
        const response = await fetch(apiUrl, {
            headers: {
                'Authorization': `Bearer ${window.userToken}`
            }
        });
        
        if (!response.ok) {
            throw new Error(`API responded with status ${response.status}`);
        }
        
        const data = await response.json();
        
        // Update student info on webpage
        document.getElementById('student-name').textContent = data.name || window.userData.name || '-';
        document.getElementById('student-year').textContent = data.yearLevel || '-';
        document.getElementById('student-faculty').textContent = data.faculty || window.userData.faculty || '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ';
        document.getElementById('student-department').textContent = data.department || window.userData.department || '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå';
        
        return data;
        
    } catch (error) {
        console.error('Error fetching student info:', error);
        
        // Use window.userData if API fails
        document.getElementById('student-name').textContent = window.userData.name || '-';
        document.getElementById('student-year').textContent = window.userData.yearLevel || '-';
        document.getElementById('student-faculty').textContent = window.userData.faculty || '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ';
        document.getElementById('student-department').textContent = window.userData.department || '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå';
        
        return {
            name: window.userData.name || "‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
            yearLevel: window.userData.yearLevel || 2,
            department: window.userData.department || "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå",
            faculty: window.userData.faculty
        };
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å API
async function fetchAllSkillsFromAPI(yearLevel) {
    try {
        const response = await fetch(`${API_BASE_URL}/skills/all`, {
            headers: {
                'Authorization': `Bearer ${window.userToken}`
            }
        });
        
        if (!response.ok) {
            const altResponse = await fetch(`${API_BASE_URL}/requiredSkills/${yearLevel}`, {
                headers: {
                    'Authorization': `Bearer ${window.userToken}`
                }
            });
            
            if (altResponse.ok) {
                const allSkills = await altResponse.json();
                console.log('üîç All skills from requiredSkills endpoint:', allSkills);
                return allSkills;
            }
            
            throw new Error(`API error ${response.status}`);
        }
        
        const allSkills = await response.json();
        console.log('üîç All skills from skills/all endpoint:', allSkills);
        
        return allSkills.filter(skill => {
            if (skill.isRequired) {
                return skill.yearLevel == yearLevel;
            } else {
                return true;
            }
        });
        
    } catch (error) {
        console.error('Error fetching all skills:', error);
        return [];
    }
}

// ‡∏î‡∏∂‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
async function fetchStudentActivities(studentId) {
    try {
        const response = await fetch(`${API_BASE_URL}/students/${studentId}/activities`, {
            headers: { 'Authorization': `Bearer ${window.userToken}` }
        });
        
        if (!response.ok) throw new Error(`API error ${response.status}`);
        return await response.json();
    } catch (error) {
        console.error('Error fetching activities:', error);
        return [];
    }
}

// ‡∏î‡∏∂‡∏á‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÜ
async function fetchCompletedSkills(studentId) {
    try {
        const response = await fetch(`${API_BASE_URL}/students/${studentId}/skills`, {
            headers: { 'Authorization': `Bearer ${window.userToken}` }
        });
        
        if (!response.ok) throw new Error(`API error ${response.status}`);
        return await response.json();
    } catch (error) {
        console.error('Error fetching completed skills:', error);
        return [];
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function loadAllSkillData(studentId) {
    try {
        const studentInfo = await fetchStudentInfo(studentId);
        const allSkills = await fetchAllSkillsFromAPI(studentInfo.yearLevel);
        
        if (allSkills.length === 0) {
            console.warn('No skills data available from API');
            document.getElementById('quiz-container').innerHTML = `
                <div class="loading">
                    ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÑ‡∏î‡πâ<br>
                    <small style="color: #666; font-size: 0.9rem;">
                        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö
                    </small>
                </div>
            `;
            return;
        }
        
        const requiredSkills = allSkills.filter(skill => skill.isRequired === true);
        const optionalSkills = allSkills.filter(skill => skill.isRequired === false);
        const activities = await fetchStudentActivities(studentId);
        const completedSkills = await fetchCompletedSkills(studentId);
        const skillActivityCount = countActivitiesPerSkill(activities, allSkills);
        
        const { unlockedRequired, lockedRequired, unlockedOptional, lockedOptional } = 
            calculateAllSkillProgress(requiredSkills, optionalSkills, skillActivityCount);
        
        console.log('=== Skill Debug Info ===');
        console.log('Required Skills:', requiredSkills.map(s => ({ id: s.skillId, name: s.name })));
        console.log('Optional Skills:', optionalSkills.map(s => ({ id: s.skillId, name: s.name })));
        console.log('Unlocked Required:', unlockedRequired.map(s => ({ id: s.skillId, name: s.name })));
        console.log('========================');
        
        const completedRequiredCount = countActualCompletedSkills(requiredSkills, completedSkills);
        const completedOptionalCount = countActualCompletedSkills(optionalSkills, completedSkills);
        const pendingRequiredCount = requiredSkills.length - completedRequiredCount;
        
        updateSkillStats(completedRequiredCount, pendingRequiredCount, completedOptionalCount);
        createQuizItems(unlockedRequired, unlockedOptional, completedSkills);
        
    } catch (error) {
        console.error('Error loading skill data:', error);
    }
}

// ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏±‡∏Å‡∏©‡∏∞
function countActivitiesPerSkill(activities, allSkills) {
    const skillCount = {};
    
    allSkills.forEach(skill => {
        skillCount[skill.skillId] = 0;
    });
    
    activities.forEach(activity => {
        if (activity.surveyCompleted && activity.skillId) {
            if (skillCount.hasOwnProperty(activity.skillId)) {
                skillCount[activity.skillId]++;
            }
        }
    });
    
    return skillCount;
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
function calculateAllSkillProgress(requiredSkills, optionalSkills, skillActivityCount) {
    const unlockedRequired = [];
    const lockedRequired = [];
    const unlockedOptional = [];
    const lockedOptional = [];
    
    requiredSkills.forEach(skill => {
        const activityCount = skillActivityCount[skill.skillId] || 0;
        const requiredCount = skill.requiredActivities || REQUIRED_ACTIVITIES_COUNT;
        
        if (activityCount >= requiredCount) {
            unlockedRequired.push(skill);
        } else {
            lockedRequired.push(skill);
        }
    });
    
    optionalSkills.forEach(skill => {
        const activityCount = skillActivityCount[skill.skillId] || 0;
        const requiredCount = skill.requiredActivities || REQUIRED_ACTIVITIES_COUNT;
        
        if (activityCount >= requiredCount) {
            unlockedOptional.push(skill);
        } else {
            lockedOptional.push(skill);
        }
    });
    
    return { unlockedRequired, lockedRequired, unlockedOptional, lockedOptional };
}

// ‡∏ô‡∏±‡∏ö‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏£‡∏¥‡∏á
function countActualCompletedSkills(targetSkills, completedSkills) {
    if (!targetSkills || !completedSkills) return 0;
    
    const targetSkillIds = targetSkills.map(skill => skill.skillId);
    const completedSkillIds = completedSkills.map(skill => skill.skillId);
    const matchedSkills = targetSkillIds.filter(skillId => completedSkillIds.includes(skillId));
    
    return matchedSkills.length;
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÉ‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
function updateSkillStats(completedRequired, pendingRequired, completedOptional) {
    const totalRequiredSkills = completedRequired + pendingRequired;
    
    document.getElementById('progress-text').textContent = `${completedRequired}/${totalRequiredSkills}`;
    
    const progressPercent = totalRequiredSkills > 0 ? (completedRequired / totalRequiredSkills) * 100 : 0;
    const circumference = 2 * Math.PI * 45;
    const dashoffset = circumference - (circumference * progressPercent / 100);
    
    document.getElementById('progress-indicator').setAttribute('stroke-dasharray', circumference);
    document.getElementById('progress-indicator').setAttribute('stroke-dashoffset', dashoffset);
    
    document.getElementById('completed-required-skills').textContent = completedRequired;
    document.getElementById('pending-required-skills').textContent = pendingRequired;
    document.getElementById('completed-optional-skills').textContent = completedOptional;
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
function createQuizItems(unlockedRequired, unlockedOptional, completedSkills) {
    const quizContainer = document.getElementById('quiz-container');
    let html = '';
    
    const completedSkillIds = new Set(completedSkills.map(skill => skill.skillId));
    const allUnlockedSkills = [...unlockedRequired, ...unlockedOptional];
    
    if (allUnlockedSkills.length > 0) {
        allUnlockedSkills.forEach(skill => {
            const isAlreadyCompleted = completedSkillIds.has(skill.skillId);
            const isOptional = skill.isRequired === false;
            
            if (isAlreadyCompleted) {
                html += `
                    <div class="quiz-item">
                        <p>‚úÖ ${skill.name}</p>
                        <button class="gray-btn" disabled>‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß</button>
                    </div>
                `;
            } else {
                html += `
                    <div class="quiz-item">
                        <p>${isOptional ? '‚≠ê' : 'üìù'} ${skill.name}</p>
                        <button class="green-bt" onclick="startQuiz('${skill.skillId}')">‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö</button>
                    </div>
                `;
            }
        });
    }
    
    if (allUnlockedSkills.length === 0) {
        html = `
            <div class="loading">
                üîí ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å<br>
                <small style="color: #666; font-size: 0.9rem;">
                    ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
                </small>
            </div>
        `;
    } else {
        html += `
            <div class="quiz-item" style="background-color: #f5f5f5; border: 1px dashed #ccc;">
                <p>üîí ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å</p>
                <button class="gray-btn" disabled>‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</button>
            </div>
        `;
    }
    
    quizContainer.innerHTML = html;
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
function startQuiz(skillId) {
    const skillNames = {
        'skill001': '‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢',
        'skill002': '‡∏î‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°',
        'skill003': '‡∏î‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á',
        'skill004': '‡∏î‡πâ‡∏≤‡∏ô‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•',
        'skill005': '‡∏î‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£',
        'skill006': '‡∏î‡πâ‡∏≤‡∏ô‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏†‡∏≤‡∏ß‡∏∞‡∏ú‡∏π‡πâ‡∏ô‡∏≥',
        'skill007': '‡∏î‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
        'skill008': '‡∏î‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå',
        'skill009': '‡∏î‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤',
        'skill010': '‡∏î‡πâ‡∏≤‡∏ô‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤'
    };
    
    const skillName = skillNames[skillId] || '‡∏ó‡∏±‡∏Å‡∏©‡∏∞';
    
    const confirmStart = confirm(
        `üéØ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö "${skillName}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n\n` +
        `üìã ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠: 10 ‡∏Ç‡πâ‡∏≠\n` +
        `‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: 15 ‡∏ô‡∏≤‡∏ó‡∏µ\n` +
        `üìä ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ú‡πà‡∏≤‡∏ô: 70% (7 ‡∏Ç‡πâ‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ)\n` +
        `üèÜ ‡∏´‡∏≤‡∏Å‡∏ú‡πà‡∏≤‡∏ô: ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ô‡∏µ‡πâ\n\n` +
        `‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`
    );
    
    if (confirmStart) {
        // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠
        const sessionData = {
            token: window.userToken,
            user: window.userData
        };
        const userDataEncoded = btoa(encodeURIComponent(JSON.stringify(sessionData)));
        
        window.location.href = `quiz.html?skillId=${skillId}&data=${userDataEncoded}`;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏≠‡∏≤‡∏ó‡πå
function logout() {
    const confirmLogout = confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?');
    if (confirmLogout) {
        window.userData = null;
        window.userToken = null;
        window.location.href = "login.html";
    }
}

// ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Back
window.history.pushState(null, '', window.location.href);
window.onpopstate = function() {
    window.history.pushState(null, '', window.location.href);
};